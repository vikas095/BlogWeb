{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _Portal = _interopRequireDefault(require(\"./Portal\"));\n\nvar _Fade = _interopRequireDefault(require(\"./Fade\"));\n\nvar _utils = require(\"./utils\");\n\nfunction noop() {}\n\nvar FadePropTypes = _propTypes.default.shape(_Fade.default.propTypes);\n\nvar propTypes = {\n  isOpen: _propTypes.default.bool,\n  autoFocus: _propTypes.default.bool,\n  centered: _propTypes.default.bool,\n  size: _propTypes.default.string,\n  toggle: _propTypes.default.func,\n  keyboard: _propTypes.default.bool,\n  role: _propTypes.default.string,\n  labelledBy: _propTypes.default.string,\n  backdrop: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['static'])]),\n  onEnter: _propTypes.default.func,\n  onExit: _propTypes.default.func,\n  onOpened: _propTypes.default.func,\n  onClosed: _propTypes.default.func,\n  children: _propTypes.default.node,\n  className: _propTypes.default.string,\n  wrapClassName: _propTypes.default.string,\n  modalClassName: _propTypes.default.string,\n  backdropClassName: _propTypes.default.string,\n  contentClassName: _propTypes.default.string,\n  external: _propTypes.default.node,\n  fade: _propTypes.default.bool,\n  cssModule: _propTypes.default.object,\n  zIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),\n  backdropTransition: FadePropTypes,\n  modalTransition: FadePropTypes,\n  innerRef: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.func])\n};\nvar propsToOmit = Object.keys(propTypes);\nvar defaultProps = {\n  isOpen: false,\n  autoFocus: true,\n  centered: false,\n  role: 'dialog',\n  backdrop: true,\n  keyboard: true,\n  zIndex: 1050,\n  fade: true,\n  onOpened: noop,\n  onClosed: noop,\n  modalTransition: {\n    timeout: _utils.TransitionTimeouts.Modal\n  },\n  backdropTransition: {\n    mountOnEnter: true,\n    timeout: _utils.TransitionTimeouts.Fade // uses standard fade transition\n\n  }\n};\n\nvar Modal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(Modal, _React$Component);\n\n  function Modal(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this._element = null;\n    _this._originalBodyPadding = null;\n    _this.getFocusableChildren = _this.getFocusableChildren.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.handleBackdropClick = _this.handleBackdropClick.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.handleBackdropMouseDown = _this.handleBackdropMouseDown.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.handleEscape = _this.handleEscape.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.handleTab = _this.handleTab.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.onOpened = _this.onOpened.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.onClosed = _this.onClosed.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.state = {\n      isOpen: props.isOpen\n    };\n\n    if (props.isOpen) {\n      _this.init();\n    }\n\n    return _this;\n  }\n\n  var _proto = Modal.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.props.onEnter) {\n      this.props.onEnter();\n    }\n\n    if (this.state.isOpen && this.props.autoFocus) {\n      this.setFocus();\n    }\n\n    this._isMounted = true;\n  };\n\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.isOpen && !this.props.isOpen) {\n      this.setState({\n        isOpen: nextProps.isOpen\n      });\n    }\n  };\n\n  _proto.componentWillUpdate = function componentWillUpdate(nextProps, nextState) {\n    if (nextState.isOpen && !this.state.isOpen) {\n      this.init();\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    if (this.props.autoFocus && this.state.isOpen && !prevState.isOpen) {\n      this.setFocus();\n    }\n\n    if (this._element && prevProps.zIndex !== this.props.zIndex) {\n      this._element.style.zIndex = this.props.zIndex;\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.props.onExit) {\n      this.props.onExit();\n    }\n\n    if (this.state.isOpen) {\n      this.destroy();\n    }\n\n    this._isMounted = false;\n  };\n\n  _proto.onOpened = function onOpened(node, isAppearing) {\n    this.props.onOpened();\n    (this.props.modalTransition.onEntered || noop)(node, isAppearing);\n  };\n\n  _proto.onClosed = function onClosed(node) {\n    // so all methods get called before it is unmounted\n    this.props.onClosed();\n    (this.props.modalTransition.onExited || noop)(node);\n    this.destroy();\n\n    if (this._isMounted) {\n      this.setState({\n        isOpen: false\n      });\n    }\n  };\n\n  _proto.setFocus = function setFocus() {\n    if (this._dialog && this._dialog.parentNode && typeof this._dialog.parentNode.focus === 'function') {\n      this._dialog.parentNode.focus();\n    }\n  };\n\n  _proto.getFocusableChildren = function getFocusableChildren() {\n    return this._element.querySelectorAll(_utils.focusableElements.join(', '));\n  };\n\n  _proto.getFocusedChild = function getFocusedChild() {\n    var currentFocus;\n    var focusableChildren = this.getFocusableChildren();\n\n    try {\n      currentFocus = document.activeElement;\n    } catch (err) {\n      currentFocus = focusableChildren[0];\n    }\n\n    return currentFocus;\n  } // not mouseUp because scrollbar fires it, shouldn't close when user scrolls\n  ;\n\n  _proto.handleBackdropClick = function handleBackdropClick(e) {\n    if (e.target === this._mouseDownElement) {\n      e.stopPropagation();\n      if (!this.props.isOpen || this.props.backdrop !== true) return;\n      var backdrop = this._dialog ? this._dialog.parentNode : null;\n\n      if (backdrop && e.target === backdrop && this.props.toggle) {\n        this.props.toggle(e);\n      }\n    }\n  };\n\n  _proto.handleTab = function handleTab(e) {\n    if (e.which !== 9) return;\n    var focusableChildren = this.getFocusableChildren();\n    var totalFocusable = focusableChildren.length;\n    var currentFocus = this.getFocusedChild();\n    var focusedIndex = 0;\n\n    for (var i = 0; i < totalFocusable; i += 1) {\n      if (focusableChildren[i] === currentFocus) {\n        focusedIndex = i;\n        break;\n      }\n    }\n\n    if (e.shiftKey && focusedIndex === 0) {\n      e.preventDefault();\n      focusableChildren[totalFocusable - 1].focus();\n    } else if (!e.shiftKey && focusedIndex === totalFocusable - 1) {\n      e.preventDefault();\n      focusableChildren[0].focus();\n    }\n  };\n\n  _proto.handleBackdropMouseDown = function handleBackdropMouseDown(e) {\n    this._mouseDownElement = e.target;\n  };\n\n  _proto.handleEscape = function handleEscape(e) {\n    if (this.props.isOpen && this.props.keyboard && e.keyCode === 27 && this.props.toggle) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.props.toggle(e);\n    }\n  };\n\n  _proto.init = function init() {\n    try {\n      this._triggeringElement = document.activeElement;\n    } catch (err) {\n      this._triggeringElement = null;\n    }\n\n    this._element = document.createElement('div');\n\n    this._element.setAttribute('tabindex', '-1');\n\n    this._element.style.position = 'relative';\n    this._element.style.zIndex = this.props.zIndex;\n    this._originalBodyPadding = (0, _utils.getOriginalBodyPadding)();\n    (0, _utils.conditionallyUpdateScrollbar)();\n    document.body.appendChild(this._element);\n\n    if (Modal.openCount === 0) {\n      document.body.className = (0, _classnames.default)(document.body.className, (0, _utils.mapToCssModules)('modal-open', this.props.cssModule));\n    }\n\n    Modal.openCount += 1;\n  };\n\n  _proto.destroy = function destroy() {\n    if (this._element) {\n      document.body.removeChild(this._element);\n      this._element = null;\n    }\n\n    if (this._triggeringElement) {\n      if (this._triggeringElement.focus) this._triggeringElement.focus();\n      this._triggeringElement = null;\n    }\n\n    if (Modal.openCount <= 1) {\n      var modalOpenClassName = (0, _utils.mapToCssModules)('modal-open', this.props.cssModule); // Use regex to prevent matching `modal-open` as part of a different class, e.g. `my-modal-opened`\n\n      var modalOpenClassNameRegex = new RegExp(\"(^| )\" + modalOpenClassName + \"( |$)\");\n      document.body.className = document.body.className.replace(modalOpenClassNameRegex, ' ').trim();\n    }\n\n    Modal.openCount -= 1;\n    (0, _utils.setScrollbarWidth)(this._originalBodyPadding);\n  };\n\n  _proto.renderModalDialog = function renderModalDialog() {\n    var _classNames,\n        _this2 = this;\n\n    var attributes = (0, _utils.omit)(this.props, propsToOmit);\n    var dialogBaseClass = 'modal-dialog';\n    return _react.default.createElement(\"div\", (0, _extends2.default)({}, attributes, {\n      className: (0, _utils.mapToCssModules)((0, _classnames.default)(dialogBaseClass, this.props.className, (_classNames = {}, _classNames[\"modal-\" + this.props.size] = this.props.size, _classNames[dialogBaseClass + \"-centered\"] = this.props.centered, _classNames)), this.props.cssModule),\n      role: \"document\",\n      ref: function ref(c) {\n        _this2._dialog = c;\n      }\n    }), _react.default.createElement(\"div\", {\n      className: (0, _utils.mapToCssModules)((0, _classnames.default)('modal-content', this.props.contentClassName), this.props.cssModule)\n    }, this.props.children));\n  };\n\n  _proto.render = function render() {\n    if (this.state.isOpen) {\n      var _this$props = this.props,\n          wrapClassName = _this$props.wrapClassName,\n          modalClassName = _this$props.modalClassName,\n          backdropClassName = _this$props.backdropClassName,\n          cssModule = _this$props.cssModule,\n          isOpen = _this$props.isOpen,\n          backdrop = _this$props.backdrop,\n          role = _this$props.role,\n          labelledBy = _this$props.labelledBy,\n          external = _this$props.external,\n          innerRef = _this$props.innerRef;\n      var modalAttributes = {\n        onClick: this.handleBackdropClick,\n        onMouseDown: this.handleBackdropMouseDown,\n        onKeyUp: this.handleEscape,\n        onKeyDown: this.handleTab,\n        style: {\n          display: 'block'\n        },\n        'aria-labelledby': labelledBy,\n        role: role,\n        tabIndex: '-1'\n      };\n      var hasTransition = this.props.fade;\n      var modalTransition = (0, _objectSpread2.default)({}, _Fade.default.defaultProps, this.props.modalTransition, {\n        baseClass: hasTransition ? this.props.modalTransition.baseClass : '',\n        timeout: hasTransition ? this.props.modalTransition.timeout : 0\n      });\n      var backdropTransition = (0, _objectSpread2.default)({}, _Fade.default.defaultProps, this.props.backdropTransition, {\n        baseClass: hasTransition ? this.props.backdropTransition.baseClass : '',\n        timeout: hasTransition ? this.props.backdropTransition.timeout : 0\n      });\n      var Backdrop = backdrop && (hasTransition ? _react.default.createElement(_Fade.default, (0, _extends2.default)({}, backdropTransition, {\n        in: isOpen && !!backdrop,\n        cssModule: cssModule,\n        className: (0, _utils.mapToCssModules)((0, _classnames.default)('modal-backdrop', backdropClassName), cssModule)\n      })) : _react.default.createElement(\"div\", {\n        className: (0, _utils.mapToCssModules)((0, _classnames.default)('modal-backdrop', 'show', backdropClassName), cssModule)\n      }));\n      return _react.default.createElement(_Portal.default, {\n        node: this._element\n      }, _react.default.createElement(\"div\", {\n        className: (0, _utils.mapToCssModules)(wrapClassName)\n      }, _react.default.createElement(_Fade.default, (0, _extends2.default)({}, modalAttributes, modalTransition, {\n        in: isOpen,\n        onEntered: this.onOpened,\n        onExited: this.onClosed,\n        cssModule: cssModule,\n        className: (0, _utils.mapToCssModules)((0, _classnames.default)('modal', modalClassName), cssModule),\n        innerRef: innerRef\n      }), external, this.renderModalDialog()), Backdrop));\n    }\n\n    return null;\n  };\n\n  return Modal;\n}(_react.default.Component);\n\nModal.propTypes = propTypes;\nModal.defaultProps = defaultProps;\nModal.openCount = 0;\nvar _default = Modal;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}